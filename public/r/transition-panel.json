{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "transition-panel",
  "type": "registry:ui",
  "title": "Transition Panel",
  "description": "A transition panel component",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/ui/transition-panel.tsx",
      "content": "\"use client\";\nimport * as React from \"react\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { ChevronRight } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ntype Direction = 1 | -1;\ntype PanelId = string;\n\ntype TransitionPanelState = {\n  currentPanel: PanelId;\n  direction: Direction;\n  hasMoreThanOnePanel: boolean;\n  pushNewPanel: (panelId: PanelId) => void;\n  removePanel: () => void;\n};\n\nconst initialContext: TransitionPanelState = {\n  currentPanel: \"\",\n  direction: 1,\n  hasMoreThanOnePanel: false,\n  pushNewPanel: () => {},\n  removePanel: () => {},\n};\n\nconst TransitionPanelContext =\n  React.createContext<TransitionPanelState>(initialContext);\n\nconst panelTransitionVariants = {\n  enter: (direction: Direction) => ({\n    opacity: 0,\n    x: direction > 0 ? \"100%\" : \"-100%\",\n    position: \"initial\",\n  }),\n  center: { opacity: 1, x: 0, zIndex: 1 },\n  exit: (direction: Direction) => ({\n    opacity: 0,\n    x: direction < 0 ? \"100%\" : \"-100%\",\n    position: \"absolute\",\n    zIndex: 0,\n  }),\n};\n\ntype TransitionPanelProps = {\n  defaultValue: PanelId;\n  children: React.ReactNode;\n};\n\nfunction TransitionPanel({ defaultValue, children }: TransitionPanelProps) {\n  const [direction, setDirection] = React.useState<Direction>(1);\n\n  const [stack, setStack] = React.useState<PanelId[]>([defaultValue]);\n  const currentPanel = stack[stack.length - 1];\n  const hasMoreThanOnePanel = stack.length > 1;\n\n  const pushNewPanel = (panelId: PanelId) => {\n    setStack((prevStack) => [...prevStack, panelId]);\n    setDirection(1);\n  };\n\n  const removePanel = () => {\n    if (!hasMoreThanOnePanel) return;\n    setStack((prevStack) => prevStack.slice(0, -1));\n    setDirection(-1);\n  };\n\n  const value = {\n    currentPanel,\n    direction,\n    hasMoreThanOnePanel,\n    pushNewPanel,\n    removePanel,\n  };\n\n  return (\n    <TransitionPanelContext value={value}>\n      <AnimatePresence initial={false} custom={direction}>\n        <motion.div\n          key={currentPanel}\n          variants={panelTransitionVariants}\n          initial=\"enter\"\n          animate=\"center\"\n          exit=\"exit\"\n          transition={{\n            duration: 0.3,\n          }}\n          custom={direction}\n        >\n          {children}\n        </motion.div>\n      </AnimatePresence>\n    </TransitionPanelContext>\n  );\n}\n\nconst useTransitionPanel = () => {\n  const context = React.useContext(TransitionPanelContext);\n\n  if (context === undefined)\n    throw new Error(\"useContentStack must be used within a TransitionPanel\");\n\n  return context;\n};\n\ntype TransitionPanelContentProps = React.ComponentProps<\"div\"> & {\n  value: PanelId;\n};\n\nfunction TransitionPanelContent({\n  value,\n  className,\n  children,\n  ...props\n}: TransitionPanelContentProps) {\n  const { currentPanel } = useTransitionPanel();\n\n  if (value === currentPanel) {\n    return (\n      <div className={cn(\"p-2\", className)} {...props}>\n        <TransitionPanelBackButton className=\"mb-2\" />\n        {children}\n      </div>\n    );\n  }\n}\n\ntype TransitionPanelTriggerProps = React.ComponentProps<typeof Button> & {\n  value: PanelId;\n};\n\nfunction TransitionPanelTrigger({\n  value,\n  onClick,\n  children,\n  variant = \"ghost\",\n  className,\n  ...props\n}: TransitionPanelTriggerProps) {\n  const { pushNewPanel } = useTransitionPanel();\n\n  return (\n    <Button\n      onClick={(e) => {\n        pushNewPanel(value);\n        onClick?.(e);\n      }}\n      variant={variant}\n      className={cn(\"w-full justify-start\", className)}\n      {...props}\n    >\n      {children}\n      <ChevronRight className=\"ml-auto shrink-0\" />\n    </Button>\n  );\n}\n\nfunction TransitionPanelBackButton({\n  onClick,\n  children,\n  variant = \"secondary\",\n  className,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { hasMoreThanOnePanel, removePanel } = useTransitionPanel();\n\n  return (\n    <Button\n      onClick={(e) => {\n        removePanel();\n        onClick?.(e);\n      }}\n      variant={variant}\n      size=\"sm\"\n      className={cn(!hasMoreThanOnePanel && \"hidden\", className)}\n      {...props}\n    >\n      {children || \"Back\"}\n    </Button>\n  );\n}\n\nexport {\n  TransitionPanel,\n  TransitionPanelContent,\n  TransitionPanelTrigger,\n  TransitionPanelBackButton,\n};\n",
      "type": "registry:ui"
    }
  ]
}