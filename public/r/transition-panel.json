{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "transition-panel",
  "type": "registry:ui",
  "title": "Transition Panel",
  "description": "A transition panel component",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/components/ui/transition-panel.tsx",
      "content": "\"use client\";\r\nimport * as React from \"react\";\r\nimport { AnimatePresence, motion } from \"motion/react\";\r\nimport { ChevronRight } from \"lucide-react\";\r\n\r\nimport { Button } from \"@/registry/new-york/components/ui/button\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype Direction = 1 | -1;\r\ntype PanelId = string;\r\n\r\ntype TransitionPanelState = {\r\n  currentPanel: PanelId;\r\n  direction: Direction;\r\n  hasMoreThanOnePanel: boolean;\r\n  pushNewPanel: (panelId: PanelId) => void;\r\n  removePanel: () => void;\r\n};\r\n\r\nconst initialContext: TransitionPanelState = {\r\n  currentPanel: \"\",\r\n  direction: 1,\r\n  hasMoreThanOnePanel: false,\r\n  pushNewPanel: () => {},\r\n  removePanel: () => {},\r\n};\r\n\r\nconst TransitionPanelContext =\r\n  React.createContext<TransitionPanelState>(initialContext);\r\n\r\nconst panelTransitionVariants = {\r\n  enter: (direction: Direction) => ({\r\n    opacity: 0,\r\n    x: direction > 0 ? \"100%\" : \"-100%\",\r\n  }),\r\n  center: { opacity: 1, x: 0 },\r\n  exit: (direction: Direction) => ({\r\n    opacity: 0,\r\n    x: direction < 0 ? \"100%\" : \"-100%\",\r\n  }),\r\n};\r\n\r\ntype TransitionPanelProps = {\r\n  defaultValue: PanelId;\r\n  children: React.ReactNode;\r\n};\r\n\r\nfunction TransitionPanel({ defaultValue, children }: TransitionPanelProps) {\r\n  const [direction, setDirection] = React.useState<Direction>(1);\r\n\r\n  const [stack, setStack] = React.useState<PanelId[]>([defaultValue]);\r\n  const currentPanel = stack[stack.length - 1];\r\n  const hasMoreThanOnePanel = stack.length > 1;\r\n\r\n  const pushNewPanel = (panelId: PanelId) => {\r\n    setStack((prevStack) => [...prevStack, panelId]);\r\n    setDirection(1);\r\n  };\r\n\r\n  const removePanel = () => {\r\n    if (!hasMoreThanOnePanel) return;\r\n    setStack((prevStack) => prevStack.slice(0, -1));\r\n    setDirection(-1);\r\n  };\r\n\r\n  const value = {\r\n    currentPanel,\r\n    direction,\r\n    hasMoreThanOnePanel,\r\n    pushNewPanel,\r\n    removePanel,\r\n  };\r\n\r\n  return (\r\n    <AnimatePresence initial={false} custom={direction} mode=\"popLayout\">\r\n      <motion.div\r\n        key={currentPanel}\r\n        variants={panelTransitionVariants}\r\n        initial=\"enter\"\r\n        animate=\"center\"\r\n        exit=\"exit\"\r\n        transition={{\r\n          x: { type: \"spring\", stiffness: 300, damping: 30 },\r\n          opacity: { duration: 0.2 },\r\n        }}\r\n        custom={direction}\r\n      >\r\n        <TransitionPanelContext value={value}>\r\n          {children}\r\n        </TransitionPanelContext>\r\n      </motion.div>\r\n    </AnimatePresence>\r\n  );\r\n}\r\n\r\nconst useTransitionPanel = () => {\r\n  const context = React.useContext(TransitionPanelContext);\r\n\r\n  if (context === undefined)\r\n    throw new Error(\"useContentStack must be used within a TransitionPanel\");\r\n\r\n  return context;\r\n};\r\n\r\ntype TransitionPanelContentProps = React.ComponentProps<\"div\"> & {\r\n  value: PanelId;\r\n};\r\n\r\nfunction TransitionPanelContent({\r\n  value,\r\n  className,\r\n  children,\r\n  ...props\r\n}: TransitionPanelContentProps) {\r\n  const { currentPanel } = useTransitionPanel();\r\n\r\n  if (value === currentPanel) {\r\n    return (\r\n      <div className={cn(\"p-2\", className)} {...props}>\r\n        <TransitionPanelBackButton className=\"mb-2\" />\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ntype TransitionPanelTriggerProps = React.ComponentProps<typeof Button> & {\r\n  value: PanelId;\r\n};\r\n\r\nfunction TransitionPanelTrigger({\r\n  value,\r\n  onClick,\r\n  children,\r\n  variant = \"ghost\",\r\n  className,\r\n  ...props\r\n}: TransitionPanelTriggerProps) {\r\n  const { pushNewPanel } = useTransitionPanel();\r\n\r\n  return (\r\n    <Button\r\n      onClick={(e) => {\r\n        pushNewPanel(value);\r\n        onClick?.(e);\r\n      }}\r\n      variant={variant}\r\n      className={cn(\"w-full justify-start\", className)}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <ChevronRight className=\"ml-auto shrink-0\" />\r\n    </Button>\r\n  );\r\n}\r\n\r\nfunction TransitionPanelBackButton({\r\n  onClick,\r\n  children,\r\n  variant = \"secondary\",\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof Button>) {\r\n  const { hasMoreThanOnePanel, removePanel } = useTransitionPanel();\r\n\r\n  return (\r\n    <Button\r\n      onClick={(e) => {\r\n        removePanel();\r\n        onClick?.(e);\r\n      }}\r\n      variant={variant}\r\n      size=\"sm\"\r\n      className={cn(!hasMoreThanOnePanel && \"hidden\", className)}\r\n      {...props}\r\n    >\r\n      {children || \"Back\"}\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport {\r\n  TransitionPanel,\r\n  TransitionPanelContent,\r\n  TransitionPanelTrigger,\r\n  TransitionPanelBackButton,\r\n};\r\n",
      "type": "registry:ui"
    }
  ]
}