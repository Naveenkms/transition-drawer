{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "transition-drawer",
  "type": "registry:component",
  "title": "Transition Drawer",
  "description": "A transition drawer component",
  "dependencies": [
    "@radix-ui/react-visually-hidden",
    "react-use-measure",
    "motion",
    "vaul"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/components/transition-drawer.tsx",
      "content": "import { VisuallyHidden } from \"@radix-ui/react-visually-hidden\";\r\nimport { Archive, HomeIcon, Info, ReceiptText } from \"lucide-react\";\r\nimport Link from \"next/link\";\r\nimport Image from \"next/image\";\r\n\r\nimport {\r\n  Drawer,\r\n  DrawerTrigger,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerTitle,\r\n  DrawerHandle,\r\n} from \"@/registry/new-york/components/ui/drawer\";\r\nimport { AnimateHeight } from \"@/registry/new-york/components/ui/animate-height\";\r\nimport {\r\n  TransitionPanel,\r\n  TransitionPanelContent,\r\n  TransitionPanelTrigger,\r\n} from \"@/registry/new-york/components/ui/transition-panel\";\r\nimport { Button, buttonVariants } from \"@/registry/new-york/components/ui/button\";\r\n\r\nexport function TransitionDrawer() {\r\n  return (\r\n    <Drawer>\r\n      <DrawerTrigger>Open Drawer</DrawerTrigger>\r\n      <DrawerContent asChild className=\"overflow-hidden md:w-md md:mx-auto\">\r\n        <AnimateHeight>\r\n          <DrawerHandle />\r\n          <VisuallyHidden>\r\n            <DrawerHeader>\r\n              <DrawerTitle>Drawer Title</DrawerTitle>\r\n            </DrawerHeader>\r\n          </VisuallyHidden>\r\n          <TransitionPanel defaultValue=\"root\">\r\n            <TransitionPanelContent value=\"root\">\r\n              <ul className=\"divide-y divide-border\">\r\n                <li>\r\n                  <TransitionPanelTrigger value=\"home\">\r\n                    <HomeIcon />\r\n                    Home\r\n                  </TransitionPanelTrigger>\r\n                </li>\r\n                <li>\r\n                  <TransitionPanelTrigger value=\"products\">\r\n                    <Archive />\r\n                    Products\r\n                  </TransitionPanelTrigger>\r\n                </li>\r\n                <li>\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    className=\"w-full justify-start\"\r\n                    asChild\r\n                  >\r\n                    <Link href=\"/about\">\r\n                      <ReceiptText />\r\n                      About\r\n                    </Link>\r\n                  </Button>\r\n                </li>\r\n                <li>\r\n                  <TransitionPanelTrigger value=\"more-info\">\r\n                    <Info />\r\n                    More Info\r\n                  </TransitionPanelTrigger>\r\n                </li>\r\n              </ul>\r\n            </TransitionPanelContent>\r\n\r\n            <TransitionPanelContent value=\"home\">\r\n              <ul>\r\n                <li>\r\n                  <TransitionPanelTrigger value=\"products\">\r\n                    Products\r\n                  </TransitionPanelTrigger>\r\n                </li>\r\n              </ul>\r\n            </TransitionPanelContent>\r\n\r\n            <TransitionPanelContent value=\"products\">\r\n              <h6 className=\" text-center font-semibold\">Products</h6>\r\n              <ul className=\"divide-y divide-border\">\r\n                <li\r\n                  className={buttonVariants({\r\n                    variant: \"ghost\",\r\n                    className: \"w-full justify-start hover:bg-inherit\",\r\n                  })}\r\n                >\r\n                  Item 1\r\n                </li>\r\n                <li\r\n                  className={buttonVariants({\r\n                    variant: \"ghost\",\r\n                    className: \"w-full justify-start hover:bg-inherit\",\r\n                  })}\r\n                >\r\n                  Item 2\r\n                </li>\r\n                <li\r\n                  className={buttonVariants({\r\n                    variant: \"ghost\",\r\n                    className: \"w-full justify-start hover:bg-inherit\",\r\n                  })}\r\n                >\r\n                  Item 3\r\n                </li>\r\n              </ul>\r\n            </TransitionPanelContent>\r\n            <TransitionPanelContent value=\"more-info\">\r\n              <Image\r\n                src=\"https://avatars.githubusercontent.com/u/89766436?v=4\"\r\n                width={100}\r\n                height={100}\r\n                alt=\"avatar\"\r\n                className=\"rounded-md overflow-hidden aspect-video w-full\"\r\n              />\r\n              <p>\r\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis\r\n                repellat repudiandae est? Lorem ipsum, dolor sit amet\r\n                consectetur adipisicing elit. Expedita molestias delectus, ut\r\n                sint adipisci voluptatum obcaecati. Iure illo ex blanditiis.\r\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. A\r\n                mollitia qui facilis.\r\n              </p>\r\n            </TransitionPanelContent>\r\n          </TransitionPanel>\r\n        </AnimateHeight>\r\n      </DrawerContent>\r\n    </Drawer>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/components/ui/animate-height.tsx",
      "content": "\"use client\";\r\nimport * as React from \"react\";\r\nimport { motion } from \"motion/react\";\r\nimport useMeasure from \"react-use-measure\";\r\n\r\ntype AnimateHeightProps = React.ComponentProps<typeof motion.div> & {\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport function AnimateHeight({ children, ...props }: AnimateHeightProps) {\r\n  const [ref, bounds] = useMeasure();\r\n\r\n  return (\r\n    <motion.div animate={{ height: bounds.height }} {...props}>\r\n      <div ref={ref}>{children}</div>\r\n    </motion.div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/components/ui/transition-panel.tsx",
      "content": "\"use client\";\r\nimport * as React from \"react\";\r\nimport { AnimatePresence, motion } from \"motion/react\";\r\nimport { ChevronRight } from \"lucide-react\";\r\n\r\nimport { Button } from \"@/registry/new-york/components/ui/button\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype Direction = 1 | -1;\r\ntype PanelId = string;\r\n\r\ntype TransitionPanelState = {\r\n  currentPanel: PanelId;\r\n  direction: Direction;\r\n  hasMoreThanOnePanel: boolean;\r\n  pushNewPanel: (panelId: PanelId) => void;\r\n  removePanel: () => void;\r\n};\r\n\r\nconst initialContext: TransitionPanelState = {\r\n  currentPanel: \"\",\r\n  direction: 1,\r\n  hasMoreThanOnePanel: false,\r\n  pushNewPanel: () => {},\r\n  removePanel: () => {},\r\n};\r\n\r\nconst TransitionPanelContext =\r\n  React.createContext<TransitionPanelState>(initialContext);\r\n\r\nconst panelTransitionVariants = {\r\n  enter: (direction: Direction) => ({\r\n    opacity: 0,\r\n    x: direction > 0 ? \"100%\" : \"-100%\",\r\n  }),\r\n  center: { opacity: 1, x: 0 },\r\n  exit: (direction: Direction) => ({\r\n    opacity: 0,\r\n    x: direction < 0 ? \"100%\" : \"-100%\",\r\n  }),\r\n};\r\n\r\ntype TransitionPanelProps = {\r\n  defaultValue: PanelId;\r\n  children: React.ReactNode;\r\n};\r\n\r\nfunction TransitionPanel({ defaultValue, children }: TransitionPanelProps) {\r\n  const [direction, setDirection] = React.useState<Direction>(1);\r\n\r\n  const [stack, setStack] = React.useState<PanelId[]>([defaultValue]);\r\n  const currentPanel = stack[stack.length - 1];\r\n  const hasMoreThanOnePanel = stack.length > 1;\r\n\r\n  const pushNewPanel = (panelId: PanelId) => {\r\n    setStack((prevStack) => [...prevStack, panelId]);\r\n    setDirection(1);\r\n  };\r\n\r\n  const removePanel = () => {\r\n    if (!hasMoreThanOnePanel) return;\r\n    setStack((prevStack) => prevStack.slice(0, -1));\r\n    setDirection(-1);\r\n  };\r\n\r\n  const value = {\r\n    currentPanel,\r\n    direction,\r\n    hasMoreThanOnePanel,\r\n    pushNewPanel,\r\n    removePanel,\r\n  };\r\n\r\n  return (\r\n    <AnimatePresence initial={false} custom={direction} mode=\"popLayout\">\r\n      <motion.div\r\n        key={currentPanel}\r\n        variants={panelTransitionVariants}\r\n        initial=\"enter\"\r\n        animate=\"center\"\r\n        exit=\"exit\"\r\n        transition={{\r\n          x: { type: \"spring\", stiffness: 300, damping: 30 },\r\n          opacity: { duration: 0.2 },\r\n        }}\r\n        custom={direction}\r\n      >\r\n        <TransitionPanelContext value={value}>\r\n          {children}\r\n        </TransitionPanelContext>\r\n      </motion.div>\r\n    </AnimatePresence>\r\n  );\r\n}\r\n\r\nconst useTransitionPanel = () => {\r\n  const context = React.useContext(TransitionPanelContext);\r\n\r\n  if (context === undefined)\r\n    throw new Error(\"useContentStack must be used within a TransitionPanel\");\r\n\r\n  return context;\r\n};\r\n\r\ntype TransitionPanelContentProps = React.ComponentProps<\"div\"> & {\r\n  value: PanelId;\r\n};\r\n\r\nfunction TransitionPanelContent({\r\n  value,\r\n  className,\r\n  children,\r\n  ...props\r\n}: TransitionPanelContentProps) {\r\n  const { currentPanel } = useTransitionPanel();\r\n\r\n  if (value === currentPanel) {\r\n    return (\r\n      <div className={cn(\"p-2\", className)} {...props}>\r\n        <TransitionPanelBackButton className=\"mb-2\" />\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ntype TransitionPanelTriggerProps = React.ComponentProps<typeof Button> & {\r\n  value: PanelId;\r\n};\r\n\r\nfunction TransitionPanelTrigger({\r\n  value,\r\n  onClick,\r\n  children,\r\n  variant = \"ghost\",\r\n  className,\r\n  ...props\r\n}: TransitionPanelTriggerProps) {\r\n  const { pushNewPanel } = useTransitionPanel();\r\n\r\n  return (\r\n    <Button\r\n      onClick={(e) => {\r\n        pushNewPanel(value);\r\n        onClick?.(e);\r\n      }}\r\n      variant={variant}\r\n      className={cn(\"w-full justify-start\", className)}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <ChevronRight className=\"ml-auto shrink-0\" />\r\n    </Button>\r\n  );\r\n}\r\n\r\nfunction TransitionPanelBackButton({\r\n  onClick,\r\n  children,\r\n  variant = \"secondary\",\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof Button>) {\r\n  const { hasMoreThanOnePanel, removePanel } = useTransitionPanel();\r\n\r\n  return (\r\n    <Button\r\n      onClick={(e) => {\r\n        removePanel();\r\n        onClick?.(e);\r\n      }}\r\n      variant={variant}\r\n      size=\"sm\"\r\n      className={cn(!hasMoreThanOnePanel && \"hidden\", className)}\r\n      {...props}\r\n    >\r\n      {children || \"Back\"}\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport {\r\n  TransitionPanel,\r\n  TransitionPanelContent,\r\n  TransitionPanelTrigger,\r\n  TransitionPanelBackButton,\r\n};\r\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/components/ui/drawer.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { Drawer as DrawerPrimitive } from \"vaul\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nfunction Drawer({\r\n  ...props\r\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) {\r\n  return <DrawerPrimitive.Root data-slot=\"drawer\" {...props} />;\r\n}\r\n\r\nfunction DrawerTrigger({\r\n  ...props\r\n}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {\r\n  return <DrawerPrimitive.Trigger data-slot=\"drawer-trigger\" {...props} />;\r\n}\r\n\r\nfunction DrawerPortal({\r\n  ...props\r\n}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {\r\n  return <DrawerPrimitive.Portal data-slot=\"drawer-portal\" {...props} />;\r\n}\r\n\r\nfunction DrawerClose({\r\n  ...props\r\n}: React.ComponentProps<typeof DrawerPrimitive.Close>) {\r\n  return <DrawerPrimitive.Close data-slot=\"drawer-close\" {...props} />;\r\n}\r\n\r\nfunction DrawerOverlay({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {\r\n  return (\r\n    <DrawerPrimitive.Overlay\r\n      data-slot=\"drawer-overlay\"\r\n      className={cn(\r\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DrawerContent({\r\n  className,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof DrawerPrimitive.Content>) {\r\n  return (\r\n    <DrawerPortal data-slot=\"drawer-portal\">\r\n      <DrawerOverlay />\r\n      <DrawerPrimitive.Content\r\n        data-slot=\"drawer-content\"\r\n        className={cn(\r\n          \"group/drawer-content bg-background fixed z-50 flex h-auto flex-col\",\r\n          \"data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b\",\r\n          \"data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t\",\r\n          \"data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm\",\r\n          \"data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </DrawerPrimitive.Content>\r\n    </DrawerPortal>\r\n  );\r\n}\r\n\r\nfunction DrawerHandle() {\r\n  return (\r\n    <div className=\"bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block\" />\r\n  );\r\n}\r\n\r\nfunction DrawerHeader({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <div\r\n      data-slot=\"drawer-header\"\r\n      className={cn(\r\n        \"flex flex-col gap-0.5 p-4 group-data-[vaul-drawer-direction=bottom]/drawer-content:text-center group-data-[vaul-drawer-direction=top]/drawer-content:text-center md:gap-1.5 md:text-left\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DrawerFooter({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <div\r\n      data-slot=\"drawer-footer\"\r\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DrawerTitle({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof DrawerPrimitive.Title>) {\r\n  return (\r\n    <DrawerPrimitive.Title\r\n      data-slot=\"drawer-title\"\r\n      className={cn(\"text-foreground font-semibold\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DrawerDescription({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof DrawerPrimitive.Description>) {\r\n  return (\r\n    <DrawerPrimitive.Description\r\n      data-slot=\"drawer-description\"\r\n      className={cn(\"text-muted-foreground text-sm\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport {\r\n  Drawer,\r\n  DrawerPortal,\r\n  DrawerOverlay,\r\n  DrawerTrigger,\r\n  DrawerClose,\r\n  DrawerContent,\r\n  DrawerHandle,\r\n  DrawerHeader,\r\n  DrawerFooter,\r\n  DrawerTitle,\r\n  DrawerDescription,\r\n};\r\n",
      "type": "registry:ui"
    }
  ]
}